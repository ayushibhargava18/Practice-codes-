class Graph:
    def __init__(self, size):
        self.size = size
        self.adj_matrix = [[0] * size for _ in range(size)]

    def add_edge(self, u, v):
        self.adj_matrix[u][v] = 1  # Set the edge from u to v
        self.adj_matrix[v][u] = 1  # Set the edge from v to u (undirected)

    def bfs(self, start):
        visited = [False] * self.size
        queue = [start]
        visited[start] = True
        result = []

        while queue:
            node = queue.pop(0)
            result.append(node)

            for neighbor in range(self.size):
                if self.adj_matrix[node][neighbor] == 1 and not visited[neighbor]:
                    visited[neighbor] = True
                    queue.append(neighbor)

        return result

    def dfs(self, start, visited=None):
        if visited is None:
            visited = [False] * self.size
        visited[start] = True
        result = [start]

        for neighbor in range(self.size):
            if self.adj_matrix[start][neighbor] == 1 and not visited[neighbor]:
                result.extend(self.dfs(neighbor, visited))
        
        return result

g = Graph(6)  
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 2)
g.add_edge(1, 3)
g.add_edge(2, 4)
g.add_edge(3, 5)
g.add_edge(4, 5)

bfs_result = g.bfs(0)
dfs_result = g.dfs(0)

print("BFS starting from node 0:", bfs_result)
print("DFS starting from node 0:", dfs_result)
