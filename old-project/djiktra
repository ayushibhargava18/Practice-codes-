import sys

class Graph:

    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                      for row in range(vertices)]

    def display(self, dist):
        print("Vertex \tDistance from Source")
        for node in range(self.V):
            print(node, "\t", dist[node])

    def minDistance(self, dist, sptSet):
        min_val = sys.maxsize
        min_index = -1

        for u in range(self.V):
            if dist[u] < min_val and sptSet[u] == False:
                min_val = dist[u]
                min_index = u

        return min_index

    def dijkstra(self, src):
        dist = [sys.maxsize] * self.V
        dist[src] = 0
        sptSet = [False] * self.V

        for _ in range(self.V):
            x = self.minDistance(dist, sptSet)
            sptSet[x] = True

            for y in range(self.V):
                if self.graph[x][y] > 0 and sptSet[y] == False and dist[y] > dist[x] + self.graph[x][y]:
                    dist[y] = dist[x] + self.graph[x][y]

        self.display(dist)

if __name__ == "__main__":
    g = Graph(5)
    g.graph = [[0, 4, 0, 0, 8],
               [4, 0, 8, 0, 2],
               [0, 8, 0, 7, 0],
               [0, 0, 7, 0, 9],
               [8, 2, 0, 9, 0]]

    g.dijkstra(0)
