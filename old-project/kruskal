
class DisjointSet:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])
        return self.parent[u]

    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        if root_u != root_v:
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1

def kruskal(n, edges):
    ds = DisjointSet(n)
    mst = []
    edges.sort(key=lambda x: x[2])
    total_cost = 0

    for u, v, weight in edges:
        if ds.find(u) != ds.find(v):
            ds.union(u, v)
            mst.append((u, v, weight))
            total_cost += weight

    print("Minimum spanning tree of the given graph will contain:")
    for u, v, weight in mst:
        print(f"Edge ({u}, {v}) with weight {weight}")
    print(f"\nTotal cost of MST: {total_cost}")
n = 8  
edges = [
    (0, 1, 4), (0, 4, 4), (1, 2, 3), (1, 4, 2), (2, 3, 2),
    (3, 5, 2), (4, 6, 3), (5, 2, 1), (6, 7, 4), (7, 5, 4)
]
kruskal(n, edges)
