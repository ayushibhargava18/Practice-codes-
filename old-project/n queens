def place(board, row, col):
    for i in range(row):
        if board[i] == col: 
            return False
        if board[i] - i == col - row:  
            return False
        if board[i] + i == col + row: 
            return False
    return True

def nqueen(board, row, n, solutions):
    if row == n:
        solutions.append(board[:])
        return

    for col in range(n):
        if place(board, row, col):
            board[row] = col 
            nqueen(board, row + 1, n, solutions) 
            board[row] = -1  

def print_board(board):
    n = len(board)
    for i in range(n):
        row = ['.'] * n 
        row[board[i]] = 'Q' 
        print(' '.join(row))  
    print()  

def solve_nqueen(n):
    board = [-1] * n  
    solutions = []
    nqueen(board, 0, n, solutions)
    return solutions

n = 4
solutions = solve_nqueen(n)
for sol in solutions:
    print_board(sol)
    print("Array:", sol)
